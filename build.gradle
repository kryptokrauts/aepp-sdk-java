buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:5.2.0"
    }
}

plugins {
    id "com.github.sherter.google-java-format" version "0.8"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id "maven"
    id "maven-publish"
    id "jacoco"
    id "java"
    id "signing"
}

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'org.openapi.generator'

sourceCompatibility = JavaVersion.VERSION_1_8

googleJavaFormat {
    toolVersion = '1.7'
}

ext {
    vertxVersion = "3.6.3"
    jacksonVersion = "2.9.8"

    lombokVersion = "1.18.10"

    bouncycastleVersion = "1.68"
    bitcoinjCoreVersion = "0.14.7"
    tuweniVersion = "0.8.2"

    junitVersion = "5.4.2"
    junitPlatformVersion = "1.4.2"
    spectrumVersion = "1.2.0"

    slf4jVersion = "1.7.26"
}

task generateAeternityApiClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    library = "vertx"
    inputSpec = "${rootDir}/api/oas3_aeternity.yml".toString()
    outputDir = "${rootDir}/build/generated"
    invokerPackage = "com.kryptokrauts.aeternity.generated"
    apiPackage = "com.kryptokrauts.aeternity.generated.api"
    modelPackage = "com.kryptokrauts.aeternity.generated.model"
    templateDir = "${rootDir}/api/vertx-templates"
    typeMappings = [
            "UInt"         : "java.math.BigInteger",
            "UInt16"       : "java.math.BigInteger",
            "UInt32"       : "java.math.BigInteger",
            "UInt64"       : "java.math.BigInteger",
            "Integer"      : "java.math.BigInteger",
            "TxBlockHeight": "java.math.BigInteger",
            "RelativeTTL"  : "com.kryptokrauts.aeternity.generated.model.TTL"
    ]
    importMappings = [
            "UInt"         : "java.math.BigInteger",
            "UInt16"       : "java.math.BigInteger",
            "UInt32"       : "java.math.BigInteger",
            "UInt64"       : "java.math.BigInteger",
            "Integer"      : "java.math.BigInteger",
            "TxBlockHeight": "java.math.BigInteger",
            "RelativeTTL"  : "com.kryptokrauts.aeternity.generated.model.TTL"
    ]
    configOptions = [
            dateLibrary: "java8",
    ]
}

task generateSophiaCompilerClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    library = "vertx"
    inputSpec = "${rootDir}/api/swagger_sophia_compiler.yml".toString()
    outputDir = "${rootDir}/build/generated"
    invokerPackage = "com.kryptokrauts.sophia.compiler.generated"
    apiPackage = "com.kryptokrauts.sophia.compiler.generated.api"
    modelPackage = "com.kryptokrauts.sophia.compiler.generated.model"
    templateDir = "${rootDir}/api/vertx-templates"
    typeMappings = [
            "Integer": "java.math.BigInteger",
    ]
    importMappings = [
            "Integer": "java.math.BigInteger",
    ]
    configOptions = [
            dateLibrary: "java8",
    ]
}

task generateIndaexApiClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    library = "vertx"
    inputSpec = "${rootDir}/api/swagger_indaex.yml".toString()
    outputDir = "${rootDir}/build/generated"
    invokerPackage = "com.kryptokrauts.indaex.generated"
    apiPackage = "com.kryptokrauts.indaex.generated.api"
    modelPackage = "com.kryptokrauts.indaex.generated.model"
    templateDir = "${rootDir}/api/vertx-templates"
    typeMappings = [
            "Integer": "java.math.BigInteger",
    ]
    importMappings = [
            "Integer": "java.math.BigInteger",
    ]
    configOptions = [
            dateLibrary: "java8",
    ]
}

task generateApiClients {
    dependsOn(generateAeternityApiClient)
    dependsOn(generateSophiaCompilerClient)
    dependsOn(generateIndaexApiClient)
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    sharedCompile
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'io.netty') {
            details.useVersion "4.1.34.Final"
        }
    }
}

sourceSets {
    main {
        java.srcDirs += "${project.buildDir.path}/generated/src/main/java"
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file("src/integrationTest/java")
        }
        resources.srcDir file("src/integrationTest/resources")
    }
}

task integrationTest(type: JavaExec, dependsOn: integrationTestClasses) {
    group = "Verification"
    description = "runs integration tests"
    classpath = sourceSets.integrationTest.runtimeClasspath
    main = "org.junit.platform.console.ConsoleLauncher"
    args = ["--scan-classpath", sourceSets.integrationTest.output.classesDirs.asPath,
            "--details", "tree",
            "--reports-dir", "${buildDir}/testResults/junit-integrationTest",
            "--fail-if-no-tests"]
}

final Boolean generateSources = Boolean.parseBoolean(System.getenv("AETERNITY_GENERATE_SOURCES"))
task compileGeneratedSources() {
    if (generateSources) {
        dependsOn(generateApiClients)
    }
}

compileJava {
    dependsOn(compileGeneratedSources)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // cryptography
    compile "org.bitcoinj:bitcoinj-core:${bitcoinjCoreVersion}"
    compile "org.bouncycastle:bcprov-jdk15on:${bouncycastleVersion}"
    compile "org.apache.tuweni:tuweni-rlp:${tuweniVersion}"
    compile "org.apache.tuweni:tuweni-crypto:${tuweniVersion}"
    compile "de.mkammerer:argon2-jvm:2.5"

    // client & generated model classes
    compile "io.swagger:swagger-annotations:1.5.22"
    compile "io.vertx:vertx-web-client:${vertxVersion}"
    compile "io.vertx:vertx-rx-java2:${vertxVersion}"
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // guava (we explicitely use this version to avoid loading wrong transitive dependency when using our SDK with maven)
    compile "com.google.guava:guava:27.0.1-jre"

    // tests
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation enforcedPlatform("org.junit:junit-bom:${junitVersion}")
    testRuntime "org.junit.platform:junit-platform-console:${junitPlatformVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntime "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testCompile "org.junit.vintage:junit-vintage-engine:${junitVersion}"
    testCompile "commons-io:commons-io:2.6"
    testCompile "com.greghaskins:spectrum:${spectrumVersion}"
    testCompile "io.vertx:vertx-unit:${vertxVersion}"
    testCompile "io.vertx:vertx-junit5:${vertxVersion}"
    testCompile "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
    testRuntime "org.slf4j:slf4j-simple:${slf4jVersion}"
}

test {
    dependsOn verifyGoogleJavaFormat
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn project*.test
    sourceSets sourceSets.main

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "ISC License"
            url "https://opensource.org/licenses/isc-license.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "marc0olo"
            name "Marco Walz"
            email "walz.marcoo@gmail.com"
        }
        developer {
            id "mitch-lbw"
            name "Michel Meier"
            email "dna.fan@gmx.de"
        }
    }
    scm {
        url "https://github.com/${organization}/${project.name}"
    }
}

def releaseTag = System.getenv("BUILD_TAG")
def isRelease = releaseTag != null && !releaseTag.isEmpty()
if (isRelease) {
    if (releaseTag.startsWith("v")) {
        releaseTag = releaseTag.substring(1)
    }
    project.version(releaseTag)
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId "${group}"
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode("description", "a community developed Java SDK to interact with the Ã¦ternity blockchain")
                root.appendNode("name", "${project.name}")
                root.appendNode("url", "https://github.com/${organization}/${project.name}")
                root.children().last() + pomConfig
            }
        }
    }
}

if (isRelease) {
    signing {
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenPublication
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}
